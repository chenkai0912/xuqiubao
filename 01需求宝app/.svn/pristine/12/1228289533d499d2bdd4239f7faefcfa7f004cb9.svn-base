<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="maximum-scale=1.0,minimum-scale=1.0,user-scalable=0,width=device-width,initial-scale=1.0"/>
		<meta name="format-detection" content="telephone=no,email=no,date=no,address=no">
		<title>title</title>
		<link rel="stylesheet" type="text/css" href="../../css/api.css"/>
		<link rel="stylesheet" type="text/css" href="../../css/edit_topic_frame.css"/>
		<link rel="stylesheet" type="text/css" href="../../css/meui.css"/>
		<link rel="stylesheet" type="text/css" href="../../css/search_editor.css" />
		<style>
			.my_search_editor {
				margin-top: 15px;
				background: #FFF;
			}
			.select_list {
				position: relative;
			}
			[v-cloak] {
				display: none;
			}
            .text_color {
                color:#999;
            }
            .active{
                color:#333;
            }
            .c_content_area{
                min-height: 120px;
                height: auto;
                max-height: 220px;
                margin-bottom: 6px;
                overflow: auto;
                -webkit-user-select:text
            }
			input{
				outline:none
			}
            .c_title_input{
                height: initial;
                line-height: normal;
                padding: .3rem 0;
            }
		</style>
	</head>
	<body>
		<div class="c_edit_layout">
			<input class="c_title_input" type="text" placeholder="请输入标题（5～30字）" />
            <!--<div class="c_content_area text_color" contenteditable="true" onpaste="onPaste(this)" onblur="fnOnInputBlur()" onfocus="fnOnInputFocus(this)"  onkeyup="fnOnkeyup(this)">-->
                <!--请输入正文（5～1000字 让和你一样感兴趣的人都看到）-->
            <!--</div>-->
            <textarea class="c_content_area" id="" onpaste="onPaste(this)" placeholder="请输入正文（5～1000字 让和你一样感兴趣的人都看到）"></textarea>
            <!--<textarea class="c_content_area" id="" placeholder="请输入正文（5～1000字 让和你一样感兴趣的人都看到）"></textarea>-->
			<div class="slide-item">
				<div class="c_add_img hidden"></div>
				<div class="c_upload_img_layout" onclick="fnPreview()">
					<img class="c_upload_img" src="" alt="" />
					<img class="video_item_play_btn" src="../../image/edit_topic/play.png" alt="" />
				</div>
			</div>
		</div>
		<!--<div class="c_share_layout meui_flex_wrap">-->
			<!--<div class="c_share_label">-->
				<!--同步到：-->
			<!--</div>-->
			<!--<img class="c_share_item" src="../../image/edit_topic/wx_timeline.png" alt="" tapmode onclick="fnShare(1)"/>-->
			<!--<img class="c_share_item" src="../../image/edit_topic/sina.png" alt=""  tapmode onclick="fnShare(2)"/>-->
			<!--<img class="c_share_item" src="../../image/edit_topic/wx_friends.png" alt=""  tapmode onclick="fnShare(0)"/>-->
			<!--<img class="c_share_item" src="../../image/edit_topic/qq_zone.png" alt=""  tapmode onclick="fnShare(4)"/>-->
		<!--</div>-->
		<div class="my_search_editor">
			<div class="select_all" v-cloak>
				<div v-for="(item,index) in list" class="select_list">
					<div class="select_cont">
						<div class="product_img">
							<img :src="item.defaultImageUrl">
						</div>
						<div class="product_cont">
							<p class="product_tit" v-text="item.productFirstName"></p>
							<p class="product_detail"  v-text="item.productSecondName + item.productTitle"></p>
							<p class="product_price">
								¥{{item.finalPrice}}
							</p>
						</div>
					</div>
					<div class="c_delete_goods" id="delete" tapmode="meui_click" @click="fnDelete(index)"></div>
				</div>
			</div>
		</div>
		<div class="space"></div>
		<div class="c_footer">
			<div class="c_footer_top meui_flex_wrap">
				<div class="c_circle meui_flex_wrap" tapmode="meui_click" onclick="fnSelectCircle()">
					<img class="c_circle_icon" id="circle_img" src="../../image/edit_topic/circle.png" alt="" />
					<div class="c_circle_txt meui_single_line" id="circle_txt">
						选择圈子
					</div>
				</div>
			</div>
			<div class="c_footer_bottom">
				<div class="c_add_goods"  tapmode="meui_click" onclick="fnOpenSelectGoods()"></div>
				<div class="c_hide_keyboard"></div>
			</div>
		</div>
	</body>
	<script type="text/javascript" src="../../script/api.js"></script>
	<script type="text/javascript" src="../../script/mapi.js"></script>
	<script type="text/javascript" src="../../script/vue.js"></script>
	<script type="text/javascript" src="../../script/service.js?v=1"></script>
	<script type="text/javascript" src="../../script/jquery.js"></script>
	<script type="text/javascript" src="../../script/flexible.js"></script>
	<script type="text/javascript" src="../../script/sha1.js"></script>
	<script type="text/javascript" src="../../script/signature.js"></script>
	<script type="text/javascript">
		var recruitId;
	  var selectGoods = [];
	  var haveSelectLabels;
	  apiready = function() {
	  	//fnRefreshOpen();
			if (api.safeArea.bottom > 0) {
					$api.css($api.dom('.c_footer_bottom'),'padding-bottom:' + api.safeArea.bottom + 'px');
				  $api.dom('.space').style.paddingBottom = api.safeArea.bottom + 'px';
			}
      		$api.css($api.dom('.c_footer'),'bottom:' + api.safeArea.bottom + 'px');
      		recruitId = api.pageParam.recruitId;
			fnOnFocus();
			// fnInitTitleInput();
			fnSetImgSrc('.c_upload_img', api.pageParam.record_video.thumbnailPath);
			if (api.pageParam.topicId) {
				selectCircleId = api.pageParam.topicId;
				$api.dom('.c_circle').disabled = 'disabled';
				fnExecSelectCircle(api.pageParam.topicId, api.pageParam.topicName, true);
			}else {
                selectCircleId = 533
            }
			$(document).on('touchmove', function(e) {
			 	$api.dom('.c_title_input').blur();
			 	$api.dom('.c_content_area').blur();
			 });
          	api.writeFile({
          	    path : api.boxDir + '/selected_num.txt',
          	    data : 0
          	});
            fnInitEventListener();
            $api.setStorage('selectGoods', selectGoods);
            fnAddNativeListener();
            fnKeyBoardListener();
        };
		function fnKeyBoardListener() {
			api.addEventListener({
				name : 'keyboardshow'
			}, function(ret, err) {
				$api.dom('.c_footer').style.position ='absolute';
				$api.dom('.c_footer').style.bottom = ret.h - api.safeArea.bottom  + 'px';
			});
			api.addEventListener({
				name : 'keyboardhide'
			}, function(ret, err) {
				$api.dom('.c_footer').style.position ='fixed';
				$api.css($api.dom('.c_footer'), 'bottom:' + api.safeArea.bottom + 'px');
			});
		}
        var isCircle = false;
		var isLabel = false;
		function fnBack() {
			if(isCircle){
				fnCloseCircle();
				return;
			}
            api.execScript({
            	name : api.winName,
	            script: 'fnCancel();'
            });
		}

		function fnCloseCircle(){
			isCircle = false;
			api.closeFrame({
				name : 'select_circle_frame'
            });
		}

        function fnGetTxt(target) {
            if (target.indexOf(".") >= 0) {
                return $api.text($api.dom(target));
            } else {
                return $api.text($api.byId(target));
            }
        }
        function fnInitEventListener(){
            api.addEventListener({
                name:'selectedNum'
            },function (ret) {
                if(ret.value.selectedNum < 5){
                    api.sendEvent({
                        name:'haveSelect',
                        extra: {
                            selectedNum: ret.value.selectedNum
                        }
                    })
                }else{
                    api.sendEvent({
                        name:'unAllowSelect',
                        extra: {
                            // selectedNum: num
                        }
                    })
                }
            });
            api.addEventListener({
                name : 'selectLabel'
            }, function(ret) {
                if(ret){
                    haveSelectLabels = ret.value.labels;
                }
            })
        }
		var goodsVue = new Vue({
			el : '.select_all',
			data : {
				list : []
			},
			methods : {
				fnDelete : function(index) {
                    goodsVue.list.splice(index, 1);
					$api.setStorage('selectGoods', goodsVue.list);
                    api.writeFile({
                        path : api.boxDir + '/selected_num.txt',
                        data : goodsVue.list.length
                    });
				}
			}
		});
        function fnFillGoods(selectGoodsStr) {
            goodsVue.list = selectGoodsStr;
            selectGoods = selectGoodsStr;
            api.closeWin({
                name : 'search_editor_win'
            });
        }

        function onPaste(context) {
            setTimeout(function () {
                context.value = context.value.replace(/<("[^"]*"|'[^']*'|[^'">])*>/g,'');
                // fnReplaceComment(context.value)
            },0)
        }

		function fnOpenSelectGoods() {
			fnOpenWin("search_editor_win", '../topic/', {
                winName:api.winName,
                selectGoods : selectGoods
            });
		}

		function fnOnFocus() {
			var keyBoardMgr = api.require("keyBoardMgr");
			keyBoardMgr.addKBListener(function(ret, err) {
			});
		}

		function onKeyBoardChanged(isShow, height) {
			if (isShow == 1) {
				fnSetDisplay(".c_hide_keyboard", true);
			} else if (isShow == 0) {
				fnSetDisplay(".c_hide_keyboard", false);
			}
		}

		function fnSelectCircle() {
			fnHideKeyBoard();
			isCircle = true;
			api.openFrame({
				name : 'select_circle_frame',
				url : '../popup/select_circle_frame.html',
				bgColor : 'rgba(0,0,0,0)',
                pageParam : {
                	frameName : api.frameName
                }
			});
		}

		var selectCircleId;
		function fnExecSelectCircle(id, name, isNotOpenSelectLabels) {
			isCircle = false;
			fnSetImgSrc('circle_img', '../../image/edit_topic/circle_active.png');
			fnSetTxt('circle_txt', name);
			$api.byId('circle_txt').style.color = '#333';
			selectCircleId = id;
			api.closeFrame({
				name : 'select_circle_frame'
			});
		}

		function fnConfirm() {
            uploadAgain = 0;
			api.showProgress();
			var path = api.pageParam.record_video.path;
			if(path.indexOf('file') != -1){
				// fnUploadVideo(path.replace('file://',''));
                path = path.replace('file://','');
			}
            if (!fnIsVideoTooBig(path))
                return;
            if (api.pageParam.recruitId) {
                fnUploadVideo(path);
            }else {
                // api.sendEvent({
                //     name: 'publishVideoTopic',
                //     extra: {
                //         path: path,
                //         videoDetail: api.pageParam.record_video,
                //         videoTopicDetail: {
                //             storyContent: fnGetValue('.c_content_area'),
                //             storyName: title,
                //             topicId: selectCircleId,
                //             tagsIds: fnGetTagsIds(),
                //             productId: fnGetProductId(),
                //             activityId: api.pageParam.taskId || '',
                //             recruitId: api.pageParam.recruitId,
                //             releaseStatus: 1,
                //             resourceId: api.pageParam.record_video.resourceId,
                //             imgs: '',
                //             mediaUrl: '',
                //             duration: parseInt(api.pageParam.record_video.duration / 1000),
                //         }
                //     }
                // });
                // api.closeWin()
                fnUploadVideo(path);
            }
		}

		 function fnCanConfirm(){
        	api.execScript({
        		frameName : 'is_publish',
	            script: 'fnCanConfrim();'
            });
        }
        function fnGetProductId() {
            var productIds = "";
            for (var i = 0; i < goodsVue.list.length; i++) {
                if (i == 0) {
                    productIds += goodsVue.list[i].sku;
                } else {
                    productIds += ',' + goodsVue.list[i].sku;
                }
            }
            return productIds;
        }

        var publishId;
        var isCanPublish = true;
        function fnPublish() {
			api.showProgress();
			var params = {
				releaseStatus : 1,
				storyContent : fnGetValue('.c_content_area'),
				storyName : title,
				imgs : mainImg,
				topicId : selectCircleId,
                tagsIds: [492], //TODO 测试 生活+ ID
                // tagsIds : [488], //TODO 生产 生活+ ID
				// tagsIds : fnGetTagsIds(),
				mediaUrl : mediaUrl,
				duration :  parseInt(api.pageParam.record_video.duration/1000),
            	productId : fnGetProductId(),
                activityId : api.pageParam.taskId || ''
            };
			if (api.pageParam.recruitId) {
				params.recruitId = recruitId;
			}
			$service.post('story/insertStory.ajax', params, function(ret, err) {
				api.hideProgress();
				if (ret) {
					if (ret.ok == 1) {
                        isCanPublish = false;
                        api.sendEvent({
							name : 'topicPublicSuccessEvent',
							extra : {
								recruitId : recruitId
							}
						});
						fnToast('发表成功');
						setTimeout(function(){
							$service.get('topic/joinInTopic.ajax', {
								topicId : selectCircleId
							}, function(ret, err) {
							},true);
							publishId = ret.data;
							if(platformType == -1){
								fnOpenWinReload('topic_details', null, {
									type : 3,
									id : publishId,
									openType : '',
									closeToWin : true
								});
                                // api.closeWin();
							}else{
								fnShareNative();
							}
						},1000);
					} else {
						fnCanConfirm();
						fnToast(ret.data.content);
					}
				} else {
					fnCanConfirm();
					fnToast(err.msg);
				}
			},true);
		}

		var platformType = -1;
		function fnShare(type) {
			var shareItems = $api.domAll('.c_share_item');
			for (var i = 0; i < shareItems.length; i++) {
				if (i == 0) {
					shareItems[i].src = '../../image/edit_topic/wx_timeline.png';
				} else if (i == 1) {
					shareItems[i].src = '../../image/edit_topic/sina.png';
				} else if (i == 2) {
					shareItems[i].src = '../../image/edit_topic/wx_friends.png';
				} else if (i == 3) {
					shareItems[i].src = '../../image/edit_topic/qq_zone.png';
				}
			}
			if(platformType == type) {
				platformType = -1;
				return;
			}
			platformType = type;
			if (platformType == 0) {
				shareItems[2].src = '../../image/edit_topic/wx_friends_active.png';
			} else if (platformType == 1) {
				shareItems[0].src = '../../image/edit_topic/wx_timeline_active.png';
			} else if (platformType == 2) {
				shareItems[1].src = '../../image/edit_topic/sina_active.png';
			} else if (platformType == 4) {
				shareItems[3].src = '../../image/edit_topic/qq_zone_active.png';
			}
		}

		var isPublisShare = false;
		function fnShareNative() {
			isPublisShare = true;
			var url = SHARE_HOST + 'topic_details_frame.html?' + fnGetShareUrl(publishId);
			var storyContent = fnGetValue('.c_content_area');
			if(platformType == 2){
				if(storyContent && storyContent.length >30){
					storyContent = storyContent.substring(0,30);
				}
//				storyContent += ' '+url;
			}
			var content = ( storyContent.length > 30 ? storyContent.substr(0, 30) : storyContent) || '马上进入，参与话题讨论吧...';
			var picUrl = 'http://www.ehaier.com/mstatic/wd/v2/img/sg.png';
			if (mainImg  && mainImg[0]) {
				picUrl = mainImg[0];
			}
            api.showProgress();
			api.sendEvent({
				name : 'APICloudCallNaviteMethod',
				extra : {
					type : 3,
					canCallBack : 1,
					command : [title + '-顺逛微社区', content, picUrl, url, 0, platformType]
				}
			});
		}

		function fnGetShareUrl() {
			var params = {
				type : 3,
				id : publishId
			};
			return new Base64().encode(JSON.stringify(params));
		}

		function fnCloseInput() {
			var UIInput = api.require('UIInput');
			UIInput.close({
				id : inputId
			});
		}

		function fnHideKeyBoard() {
			var keyBoardMgr = api.require("keyBoardMgr");
			keyBoardMgr.hideKeyBoard(function(ret, err) {
			});
		}

		var title;
		function fnCheck() {
            if(!isCanPublish) {
                return;
            }
            var value = $api.dom('.c_title_input').value || '';
				if (fnIsEmpty(value)) {
					fnHideKeyBoard();
					fnToast('标题不能为空', 'middle');
					return false;
				} else {
					if (value.length < 5 || value.length > 30) {
						fnToast('话题标题字数应为5~30字', 'middle');
						return false;
					}
				}
				title = value;
				if (fnIsEmpty(fnGetValue('.c_content_area'))) {
					fnHideKeyBoard();
					fnToast('内容不能为空', 'middle');
					return false;
				} else {
					// var value = fnGetTxt('.c_content_area');
					value = fnReplaceComment(fnGetValue('.c_content_area'));
                    if(value == '请输入正文（5～1000字让和你一样感兴趣的人都看到）'){
                    	fnToast('内容不能为空', 'middle');
                    	return false;
                    }
					if (value.length < 5 || value.length > 1000) {
						fnToast('话题内容字数应为5~1000字', 'middle');
						return false;
					}
				}
				/*if (fnIsEmpty(selectCircleId)) {
					fnHideKeyBoard();
					fnToast('请选择圈子', 'middle');
					return false;
				}
				if (fnIsEmpty(fnGetTagsIds())) {
					fnHideKeyBoard();
					fnToast('请选择标签', 'middle');
					return false;
				}*/
                fnConfirm();
		}

        var uploadAgain = 0;
		function fnAddNativeListener() {
			api.addEventListener({
				name : 'NaviteCallAPICloudMethod'
			}, function(rets, err) {
				var ret  = rets.value;
				if (ret.type == 4) {
                    if (ret.tag != api.frameName){
                        return;
                    }
                    if (uploadAgain == 1){
                        api.hideProgress();
                        return;
                    }
					if (ret.subType !== 'progress' && ret.success == 1) {
                        uploadAgain = 1;
						mainImg = ret.data.urls;
						fnPublish();
					} else if (ret.success != 1) {
                        api.hideProgress();
                        uploadAgain = 1;
						fnToast(ret.message,'middle');
					}
				}else if (ret.type == 3) {
                    api.hideProgress();
					if (ret.success == 1) {
						fnToast('分享成功', 'middle');
						$service.get(HOST + '/v3/h5/sg/member/getShareSuccess.json',{
							topicId : publishId
						},function(ret,err) {
						});
						var flag = 1;
						if(recruitId) {
							flag = 4;
						}
						$service.get('topic/share.ajax',{
							flag : flag,
							itemId : publishId
						},function(ret,err){
						});
						setTimeout(function(){
							isOpenWin = true;
							fnOpenWinReload('topic_details', null, {
								type : 3,
								id : publishId,
								openType : 'publish',
								closeToWin : true
							});
						},1000);
					} else {
						fnToast(ret.message, 'middle');
						setTimeout(function(){
							isOpenWin = true;
							var openType = 'publish';
							if(platformType == -1){
								openType = '';
							}
							fnOpenWinReload('topic_details', null, {
								type : 3,
								id : publishId,
								openType : openType,
								closeToWin : true
							});
						},1000);
					}
				}else if (ret.type == 13) {
					if (ret.tag == 'resume') {
						if(isPublisShare) {
							setTimeout(function(){
								if(isOpenWin){
									return;
								}
								fnOpenWinReload('topic_details', null, {
									type : 3,
									id : publishId,
									openType : 'publish'
								});
							},500);
						}
					}
				}
			});
		}

		var isOpenWin = false;

		function fnUploadImg(path) {
			api.showProgress();
			var url = HOST + '/v3/h5/sg/upLoadCommentPicture.html';
			var token = api.readFile({
				sync : true,
				path : api.boxDir + '/token.txt'
			});
			var files = [];
			files.push(path);
			api.sendEvent({
				name : 'APICloudCallNaviteMethod',
				extra : {
				    tag: api.frameName,
					type : 4,
					canCallBack : 1,
                    command : api.systemType === 'android'?[url, token, 0, 0, null, files]:[url, token, 0, 0, 80, files,2]
				}
			});
		}

		function fnPreview(){
			fnOpenWinReload('video_only_preview',null,{
				video_record : {
					path : api.pageParam.record_video.path
				}
			});
		}

		var mediaUrl;
		var mainImg;

		var inputId;
		function fnInitTitleInput() {
			var UIInput = api.require('UIInput');
			UIInput.open({
				rect : {
					x : 15,
					y : 5,
					w : api.winWidth - 30,
					h : 30
				},
				styles : {
					bgColor : 'rgba(0,0,0,0)',
					size : 16,
					color : '#333',
					placeholder : {
						color : '#999',
						size : 16
					}
				},
				autoFocus : true,
				placeholder : '请输入标题（5～30字）',
				fixedOn : api.frameName,
				fixed : false
			}, function(ret) {
				inputId = ret.id;
			});
		}

		function fnIsVideoTooBig(path) {
			var fs = api.require('fs');
			var ret = fs.getAttributeSync({
				path : path
			});
			if (ret.status) {
				if (ret.attribute.size / (1024 *1024) > 30) {
					fnToast('请上传30M以内的视频', 'middle');
					api.hideProgress();
					return false;
				}
			}
			return true;
		}

		function fnUploadVideo(filePath) {

			api.showProgress();
			var aliOSS = api.require('aliyunOSS');
			// TODO 测试环境  正式环境区分
			aliOSS.initOSSClient({
				endpoint : "https://oss-cn-beijing.aliyuncs.com",
				accessKeyId : "LTAIinblFEJdcOSl",
				accessKeySecret : "r2mJzALLHOiV9ZEJEqvn82sPvQjOr3",
				bucketName : "sg-video-test",
                // accessKeyId : "LTAICIlg7SEWlQxA",
                // accessKeySecret : "oMysSja83xGaXnYA41BOyJAg9lnk65",
                // bucketName : "sg-video"
			}, function(ret, err) {
				if (ret && ret.status) {
					fnUpload2OSS(filePath);
				} else {
					api.hideProgress();
					api.toast({
						msg : '上传视频失败'
					});
				}
			});
		}

		function fnGetVideoFolderName() {
			var date = new Date();
			var year = date.getFullYear();
			var month = date.getMonth() + 1;
			if (month >= 1 && month <= 9) {
				month = "0" + month;
			}
			return year + '/' + month + '/';
		}

		function fnUpload2OSS(filePath) {
			var aliOSS = api.require('aliyunOSS');
            // TODO 测试环境  正式环境区分
			var date = Date.now();
			var objectKey = "story/video/" + fnGetVideoFolderName() + guid() + '.mp4';
			// var objectKey = "story/video/" + fnGetVideoFolderName() + guid() + '.' + filePath.substr(filePath.lastIndexOf('.')+1);
			// var url = 'https://sg-video.oss-cn-beijing.aliyuncs.com/'+objectKey;
			var url = 'https://sg-video-test.oss-cn-beijing.aliyuncs.com/'+objectKey;
			if (api.systemType === 'ios' &&  api.pageParam.record_video.resourceId) {
                var UIAlbumBrowser = api.require('UIAlbumBrowser');
                UIAlbumBrowser.transPath({
                    path: api.pageParam.record_video.resourceId
                }, function (ret, err) {
                    if (ret){
                        aliOSS.upload({
                            bucketName: "sg-video-test",
                            // bucketName: "sg-video",
                            objectKey: objectKey,
                            file: ret.path
                        }, function (ret, err) {
                            if (ret) {
                                if (ret.oper == "complete") {
                                    api.hideProgress();
                                    mediaUrl = url;
                                    fnUploadImg(api.pageParam.record_video.thumbnailPath);
                                }
                            } else {
                                api.hideProgress();
                                api.toast({
                                    msg: '上传视频失败'
                                });
                            }
                        });
                    } else {
                        fnToast(JSON.stringify(err));
                    }
                });
            }else {
                aliOSS.upload({
                    bucketName: "sg-video-test",
                    // bucketName: "sg-video",
                    objectKey: objectKey,
                    file: filePath
                }, function (ret, err) {
                    if (ret) {
                        if (ret.oper == "complete") {
                            api.hideProgress();
                            mediaUrl = url;
                            fnUploadImg(api.pageParam.record_video.thumbnailPath);
                        }
                    } else {
                        api.hideProgress();
                        api.toast({
                            msg: '上传视频失败'
                        });
                    }
                });
            }
		}
        function fnReplaceComment(comment) {
            if (!fnIsEmpty(comment)) {
                comment = comment.replace(/\r\n/g, '<br/>');
                comment = comment.replace(/\n/g, '<br/>');
                comment = comment.replace(/\s/g, ' ');
                comment = comment.replace(/<[^>]+>/g, "");
                fnLogStr(comment);
                return comment;
            }
            return '';
        }

        //正文获取焦点事件
        var isEdit = false;
        function fnOnInputFocus(el) {
            setTimeout(function() {
                if (!isEdit) {
                el.innerHTML = '';
            }
            if (oldInputValue) {
                el.innerHTML = oldInputValue;
                $api.addCls($api.dom('.c_content_area'), 'active');
                isEdit = true;
            } else {

            }},100)
        }
        function fnOnkeyup() {
            $api.dom('.c_content_area').focus();
            var txt = fnGetTxt('.c_content_area');
            if (fnIsEmpty(txt)) {
                $api.removeCls($api.dom('.c_content_area'), 'active');
                isEdit = false;
            } else {
                $api.addCls($api.dom('.c_content_area'), 'active');
                isEdit = true;
            }
        }
        var oldInputValue;
        //正文失去焦点事件
        function fnOnInputBlur() {
            var txt = fnGetValue('.c_content_area');
            if (fnIsEmpty(txt)) {
                fnSetTxt('.c_content_area', '请输入正文（5～1000字 让和你一样感兴趣的人都看到）');
                $api.removeCls($api.dom('.c_content_area'), 'active');
            } else {

            }
        }
        function fnChangeColor() {
            $api.addCls($api.dom('.c_content_area'), 'active');
            isEdit = true;
        }
	</script>
</html>
